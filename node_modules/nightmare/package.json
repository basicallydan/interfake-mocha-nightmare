{
  "name": "nightmare",
  "version": "0.1.7",
  "author": {
    "name": "Segment.io"
  },
  "keywords": [
    "nightmare",
    "phantomjs"
  ],
  "description": "A high level wrapper for Phantomjs",
  "repository": {
    "type": "git",
    "url": "https://github.com/segmentio/nightmare.git"
  },
  "dependencies": {
    "async-series": "~0.0.1",
    "phantom": "~0.5.7",
    "debug": "^0.7.4",
    "defaults": "~1.0.0",
    "clone": "~0.1.11"
  },
  "devDependencies": {
    "should": "~2.1.1",
    "mocha": "~1.17.0"
  },
  "main": "lib/index",
  "readme": "[![Build Status](https://circleci.com/gh/segmentio/nightmare.png?circle-token=dbb94336673268633371a89865e008b70ffedf6d)](https://circleci.com/gh/segmentio/nightmare)\nNightmare\n=========\n\nNightmare is a high level wrapper for [PhantomJS](http://phantomjs.org/) that lets you automate browser tasks.\n\nThe goal is to expose just a few simple methods, and have an API that feels synchronous for each block of scripting, rather than deeply nested callbacks. It's designed for automating tasks across sites that don't have APIs.\n\n## Examples\n\nLet's search on Google:\n\n```js\nnew Nightmare()\n  .goto('https://google.com')\n    .type('input#gbqfq', 'github nightmare')\n    .click('button#gbqfba');\n```\n\nOr, here's how you might automate a nicely abstracted login + task on Swiftly:\n\n```js\nvar Swiftly = require('nightmare-swiftly');\n\nnew Nightmare()\n  .use(Swiftly.login(email, password))\n  .use(Swiftly.task(instructions, uploads, path))\n  .run(function(err, nightmare){\n    if (err) return fn(err);\n    fn();\n  });\n```\n\nAnd [here's the `nightmare-swiftly` plugin](https://github.com/segmentio/nightmare-swiftly).\n\n## API\n\n#### new Nightmare(options)\nCreate a new instance that can navigate around the web.\n\nThe available options are:\n* `timeout`: how long to wait for page loads, default `5000ms`\n* `interval`: how frequently to poll for page load state, default `50ms`\n\n#### .goto(url)\nLoad the page at `url`.\n\n#### .refresh()\nRefresh the current page.\n\n#### .url(cb)\nGet the url of the current page, the signature of the callback is `cb(url)`.\n\n#### .click(selector)\nClicks the `selector` element once.\n\n#### .type(selector, text)\nEnters the `text` provided into the `selector` element.\n\n#### .upload(selector, path)\nSpecify the `path` to upload into a file input `selector` element.\n\n#### .evaluate(fn, cb, [arg1, arg2,...])\nInvokes `fn` on the page with `args`. On completion it passes the return value of `fn` as to `cb(res)`. Useful for extracting information from the page.\n\n#### .wait()\nWait until a page finishes loading, typically after a `.click()`.\n\n#### .wait(ms)\nWait for `ms` milliseconds e.g. `.wait(5000)`\n\n#### .wait(selector)\nWait until the element `selector` is present e.g. `.wait('#pay-button')`\n\n#### .wait(fn, value, [delay])\nWait until the `fn` evaluated on the page returns `value`. Optionally, refresh the page every `delay` milliseconds, and only check after each refresh.\n\n#### .screen(path)\nSaves a screenshot of the current page to the specified `path`. Useful for debugging.\n\n#### .agent(userAgent)\nSet the `userAgent` used by PhantomJS.\n\n#### .viewport(width, height)\nSet the `width` and `height` of the viewport, useful for screenshotting.\n\n#### .use(plugin)\nUseful for using repeated code blocks, see the example with Swiftly login and task creation in the docs above.\n\n#### .run(cb)\nExecutes the queue of functions, and calls your `cb` when the script hits an error or completes the queue. The callback signature is `cb(err, nightmare)`.\n\n## Plugins\n\nHere's a list of plugins, pull request to add your own to the list :)\n\n* [nightmare-swiftly](https://github.com/segmentio/nightmare-swiftly)\n\n## License (MIT)\n\n```\nWWWWWW||WWWWWW\n W W W||W W W\n      ||\n    ( OO )__________\n     /  |           \\\n    /o o|    MIT     \\\n    \\___/||_||__||_|| *\n         || ||  || ||\n        _||_|| _||_||\n       (__|__|(__|__|\n```\n\nCopyright (c) 2014 Segment.io Inc. <friends@segment.io>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/segmentio/nightmare/issues"
  },
  "homepage": "https://github.com/segmentio/nightmare",
  "_id": "nightmare@0.1.7",
  "_from": "nightmare@"
}
